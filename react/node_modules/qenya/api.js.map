{"version":3,"sources":["../server/api.js"],"names":["resolve","reject","getDb","db","collection","find","status","sort","weight","toArray","err","routes","Error","forEach","r","router","method","route","ctx","args","query","params","apiType","body","data","JSON","parse","render","locals","variables","request","schemas","handleResult","errors","message","presetRoute","bindRouter","port","apiConfig","engine","apiServer","use","Db","tingo","qenya","mdb","connect","mongo","md","listen","running","console","log","start","stack","reset"],"mappings":"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","file":"api.js","sourcesContent":["import Koa from 'koa'\nimport cors from 'koa2-cors'\nimport Router from 'koa-router'\nimport body from 'koa-bodyparser'\nimport tingodb from 'tingodb'\nimport { graphql } from 'graphql'\nimport swig from 'swig'\nimport { MongoClient } from 'mongodb'\nimport config, { setConfig } from './config'\nimport getSchema from './graphql'\nimport { getAll } from './models/schemas'\nimport tingodbMiddleware from './middlewares/tingodb'\nimport mongodbMiddleware from './middlewares/mongodb'\n\nconst apiServer = new Koa()\nconst router = new Router()\n\napiServer.use(cors())\n\nlet getDb\nlet running = false\nlet presetRoute = () => {}\nlet handleResult\n\nasync function bindRouter() {\n  return new Promise(async (resolve, reject) => {\n    const db = await getDb()\n    db.collection('api').find({ status: 1 }).sort({ weight: -1 })\n      .toArray((err, routes) => {\n        if (err) reject(err)\n\n        if (!routes) {\n          reject(new Error('routes not found.'))\n          return\n        }\n\n        routes.forEach((r) => {\n          router[r.method](r.route, body(), async (ctx) => {\n            const args = Object.assign({}, ctx.query, ctx.params)\n\n            try {\n              if (r.apiType === 'static') {\n                ctx.body = typeof r.data === 'string' ? JSON.parse(r.data) : r.data\n              } else {\n                const query = swig.render(r.query, { locals: args })\n                const variables = ctx.request.method === 'GET' ? args : ctx.request.body\n                const schemas = await getAll(ctx.db())\n                let data = await graphql(getSchema(ctx.db('data'), schemas), query, null, null, variables)\n\n                if (handleResult) data = handleResult(data)\n\n                ctx.body = data\n              }\n            } catch (e) {\n              let errors = {\n                errors: {\n                  message: e.message,\n                },\n              }\n              if (handleResult) errors = handleResult(errors)\n\n              ctx.body = errors\n            }\n          })\n        })\n\n        resolve()\n        presetRoute(router)\n      })\n  })\n}\n\nasync function start({ port = 5002, route, render, apiConfig }) {\n  setConfig(apiConfig)\n\n  if (config.engine === 'tingodb') {\n    apiServer.use(tingodbMiddleware())\n\n    const engine = tingodb({})\n\n    getDb = async () => new Promise((resolve) => {\n      resolve(new engine.Db(config.tingo.qenya, {}))\n    })\n  } else {\n    const mdb = await mongodbMiddleware()\n    apiServer.use(mdb)\n    getDb = async () => {\n      const md = await MongoClient.connect(config.mongo.qenya)\n      return md\n    }\n  }\n\n  if (route) presetRoute = route\n  handleResult = render\n\n  await bindRouter()\n\n  apiServer.use(router.routes())\n\n  apiServer.listen(port, () => {\n    running = true\n    console.log(`api server running on http://localhost:${port}.`)\n  })\n}\n\nasync function reset() {\n  if (!running) return\n\n  router.stack = []\n  await bindRouter()\n}\n\nexport default {\n  start,\n  reset,\n}\n"]}