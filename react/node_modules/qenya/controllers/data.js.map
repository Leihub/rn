{"version":3,"sources":["../../server/controllers/data.js"],"names":["router","use","DB","get","ctx","params","schema","page","size","db","collection","query","parseInt","data","Render","success","post","request","body","del","col","_id","count","code","fail","i","fields","model","push"],"mappings":"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","file":"data.js","sourcesContent":["import Router from 'koa-router'\nimport body from 'koa-bodyparser'\nimport exception from '../middlewares/exception'\nimport { getPageList, insert, insertOrUpdate, remove } from '../models/data'\nimport { getOne as getSchema } from '../models/schemas'\nimport faker from '../utils/faker'\nimport { nextSequence } from '../utils/objectId'\n\nconst router = new Router()\nrouter.use(exception)\n\nconst DB = 'data'\n\nrouter.get('/data/:schema/:page/:size', async (ctx) => {\n  const { schema, page = 1, size = 20 } = ctx.params\n  const data = await getPageList(\n    ctx.db(DB).collection(schema),\n    ctx.query,\n    parseInt(page, 10),\n    parseInt(size, 10),\n  )\n  ctx.Render.success(data)\n})\n\nrouter.post('/data/:schema', body(), async (ctx) => {\n  let data = ctx.request.body\n  const { schema } = ctx.params\n\n  data = await insertOrUpdate(ctx.db(DB), schema, data)\n\n  ctx.Render.success(data[0])\n})\n\nrouter.del('/data/:schema', body(), async (ctx) => {\n  const query = ctx.request.body\n  const col = ctx.db(DB).collection(ctx.params.schema)\n  const count = await remove(col, query._id)\n  ctx.Render.success(count)\n})\n\nrouter.del('/data/:schema/all', body(), async (ctx) => {\n  const col = ctx.db(DB).collection(ctx.params.schema)\n  const count = await remove(col, {})\n  ctx.Render.success(count)\n})\n\nrouter.post('/data/:code/mockcreate/:count', async (ctx) => {\n  const { code, count } = ctx.params\n  const schema = await getSchema(ctx.db(), { code })\n  if (!schema) {\n    ctx.Render.fail('schema not found.')\n    return\n  }\n\n  const data = []\n\n  for (let i = 0; i < parseInt(count || 10, 10); i++) {\n    const model = await faker(schema.fields, ctx.db(DB), getPageList)\n    model._id = await nextSequence(code)\n    data.push(model)\n  }\n\n  insert(ctx.db(DB).collection(code), data)\n  ctx.Render.success('')\n})\n\nrouter.get('/data/:code/getmock', async (ctx) => {\n  const { code } = ctx.params\n\n  const schema = await getSchema(ctx.db(), { code })\n  if (!schema) {\n    ctx.Render.fail('schema not found.')\n    return\n  }\n\n  const data = await faker(schema.fields, ctx.db(DB), getPageList)\n  ctx.Render.success(data)\n})\n\nexport default router\n"]}