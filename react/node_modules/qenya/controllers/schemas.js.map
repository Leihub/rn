{"version":3,"sources":["../../server/controllers/schemas.js"],"names":["router","use","get","ctx","db","data","Render","success","post","query","request","body","_id","$ne","fail","params","id","notFound","fields","schema","updateAt","Date","now","method","createAt","old","del","count"],"mappings":"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","file":"schemas.js","sourcesContent":["import Router from 'koa-router'\nimport body from 'koa-bodyparser'\nimport { getAll, getOne, insertSchema, updateSchema, removeSchema } from '../models/schemas'\nimport objectId from '../utils/objectId'\nimport exception from '../middlewares/exception'\nimport { clearType } from '../graphql'\n\nconst router = new Router()\n\nrouter.use(exception)\n\nrouter.get('/schemas', async (ctx) => {\n  const data = await getAll(ctx.db())\n  ctx.Render.success(data)\n})\n\nrouter.post('/exist', body(), async (ctx) => {\n  const query = ctx.request.body\n  if (query._id) query._id = { $ne: objectId(query._id) }\n  else delete query._id\n  const data = await getOne(ctx.db(), query)\n\n  if (data) {\n    ctx.Render.fail('schema existed')\n  } else {\n    ctx.Render.success(true)\n  }\n})\n\nrouter.get('/schema/:id', async (ctx) => {\n  const data = await getOne(ctx.db(), { _id: objectId(ctx.params.id) })\n  if (data) {\n    ctx.Render.success(data)\n  } else {\n    ctx.Render.notFound()\n  }\n})\n\nrouter.post('/schema/fields', body(), async (ctx) => {\n  const { _id, fields } = ctx.request.body\n  const schema = await getOne(ctx.db(), { _id: objectId(_id) })\n  schema.fields = fields\n  schema.updateAt = Date.now()\n  const data = await updateSchema(ctx.db(), schema)\n\n  clearType()\n\n  ctx.Render.success(data[0])\n})\n\nrouter.post('/schema', body(), async (ctx) => {\n  let data = ctx.request.body\n  const method = data._id ? updateSchema : insertSchema\n\n  if (!data._id) {\n    data.createAt = Date.now()\n    data.fields = []\n  } else {\n    const old = await getOne(ctx.db(), { _id: objectId(data._id) })\n    data = Object.assign({}, old, data)\n  }\n  data.updateAt = Date.now()\n  data = await method(ctx.db(), data)\n\n  clearType()\n\n  ctx.Render.success(data[0])\n})\n\nrouter.del('/schema', body(), async (ctx) => {\n  const data = ctx.request.body\n  const count = await removeSchema(ctx.db(), data._id)\n  ctx.Render.success(count)\n})\n\nexport default router\n"]}