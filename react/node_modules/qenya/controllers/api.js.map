{"version":3,"sources":["../../server/controllers/api.js"],"names":["router","use","get","ctx","db","data","Render","success","_id","params","id","notFound","post","request","body","method","query","route","old","$ne","status","createAt","Date","now","weight","parseInt","existed","fail","updateAt","model","del","count"],"mappings":"8jBAAA,uC;AACA,+C;AACA;AACA,6C;AACA,qD;;AAEA,IAAMA,SAAS,yBAAf;;AAEAA,OAAOC,GAAP;;AAEAD,OAAOE,GAAP,CAAW,MAAX,qFAAmB,iBAAOC,GAAP;AACE,+BAAOA,IAAIC,EAAJ,EAAP,CADF,SACXC,IADW;AAEjBF,gBAAIG,MAAJ,CAAWC,OAAX,CAAmBF,IAAnB,EAFiB,mEAAnB;;;AAKAL,OAAOE,GAAP,CAAW,UAAX,sFAAuB,kBAAOC,GAAP;AACF,+BAAOA,IAAIC,EAAJ,EAAP,EAAiB,EAAEI,KAAK,wBAASL,IAAIM,MAAJ,CAAWC,EAApB,CAAP,EAAjB,CADE,SACfL,IADe;AAErB,gBAAIA,IAAJ,EAAU;AACRF,kBAAIG,MAAJ,CAAWC,OAAX,CAAmBF,IAAnB;AACD,aAFD,MAEO;AACLF,kBAAIG,MAAJ,CAAWK,QAAX;AACD,aANoB,qEAAvB;;;AASAX,OAAOY,IAAP,CAAY,MAAZ,EAAoB,8BAApB,sFAA4B,kBAAOT,GAAP;AACHA,gBAAIU,OAAJ,CAAYC,IADT,EACpBN,GADoB,qBACpBA,GADoB,EACZH,IADY;;AAGpBU,kBAHoB,GAGXP,qCAHW;AAIpBJ,cAJoB,GAIfD,IAAIC,EAAJ,EAJe;AAKpBY,iBALoB,GAKZ,EAAEC,OAAOZ,KAAKY,KAAd,EAAqBF,QAAQV,KAAKU,MAAlC,EALY;;AAOtBP,eAPsB;AAQxBA,kBAAM,wBAASA,GAAT,CAAN,CARwB;AASN,+BAAOJ,EAAP,EAAW,EAAEI,QAAF,EAAX,CATM,SASlBU,GATkB;AAUxBb,mBAAO,sBAAc,EAAd,EAAkBa,GAAlB,EAAuBb,IAAvB,CAAP;AACAW,kBAAMR,GAAN,GAAY,EAAEW,KAAKX,GAAP,EAAZ,CAXwB;;AAaxBH,iBAAKe,MAAL,GAAc,CAAd;AACAf,iBAAKgB,QAAL,GAAgBC,KAAKC,GAAL,EAAhB,CAdwB;;;AAiB1BlB,iBAAKmB,MAAL,GAAcC,SAASpB,KAAKmB,MAAL,IAAe,CAAxB,EAA2B,EAA3B,CAAd,CAjB0B;;AAmBJ,+BAAOpB,EAAP,EAAWY,KAAX,CAnBI,UAmBpBU,OAnBoB;AAoBtBA,mBApBsB;AAqBxBvB,gBAAIG,MAAJ,CAAWqB,IAAX,qBAAuBtB,KAAKY,KAA5B,WAAsCZ,KAAKU,MAA3C,4CArBwB;;;;AAyB1BV,iBAAKuB,QAAL,GAAgBN,KAAKC,GAAL,EAAhB,CAzB0B;;AA2BbR,qBAAOX,EAAP,EAAWC,IAAX,CA3Ba,UA2B1BA,IA3B0B;;AA6B1BF,gBAAIG,MAAJ,CAAWC,OAAX,CAAmBF,KAAK,CAAL,CAAnB,EA7B0B,sEAA5B;;;AAgCAL,OAAOY,IAAP,CAAY,aAAZ,EAA2B,8BAA3B,sFAAmC,kBAAOT,GAAP;AACTA,gBAAIU,OAAJ,CAAYC,IADH,EACzBN,GADyB,sBACzBA,GADyB,EACpBY,MADoB,sBACpBA,MADoB;AAE3BhB,cAF2B,GAEtBD,IAAIC,EAAJ,EAFsB;AAGb,+BAAOA,EAAP,EAAW,EAAEI,KAAK,wBAASA,GAAT,CAAP,EAAX,CAHa,SAG3BqB,KAH2B;AAIjC,gBAAI,CAACA,KAAL,EAAY1B,IAAIG,MAAJ,CAAWK,QAAX;;AAEZkB,kBAAMT,MAAN,GAAeA,MAAf,CANiC;AAO3B,kCAAUhB,EAAV,EAAcyB,KAAd,CAP2B;AAQjC1B,gBAAIG,MAAJ,CAAWC,OAAX,CAAmB,CAAnB,EARiC,sEAAnC;;;AAWAP,OAAO8B,GAAP,CAAW,MAAX,EAAmB,8BAAnB,sFAA2B,kBAAO3B,GAAP;AACnBE,gBADmB,GACZF,IAAIU,OAAJ,CAAYC,IADA;AAEL,kCAAUX,IAAIC,EAAJ,EAAV,EAAoBC,KAAKG,GAAzB,CAFK,SAEnBuB,KAFmB;AAGzB5B,gBAAIG,MAAJ,CAAWC,OAAX,CAAmBwB,KAAnB,EAHyB,qEAA3B,qE;;;AAMe/B,M","file":"api.js","sourcesContent":["import Router from 'koa-router'\nimport body from 'koa-bodyparser'\nimport { getAll, getOne, insertApi, updateApi, removeApi } from '../models/api'\nimport objectId from '../utils/objectId'\nimport exception from '../middlewares/exception'\n\nconst router = new Router()\n\nrouter.use(exception)\n\nrouter.get('/api', async (ctx) => {\n  const data = await getAll(ctx.db())\n  ctx.Render.success(data)\n})\n\nrouter.get('/api/:id', async (ctx) => {\n  const data = await getOne(ctx.db(), { _id: objectId(ctx.params.id) })\n  if (data) {\n    ctx.Render.success(data)\n  } else {\n    ctx.Render.notFound()\n  }\n})\n\nrouter.post('/api', body(), async (ctx) => {\n  let { _id, ...data } = ctx.request.body\n\n  const method = _id ? updateApi : insertApi\n  const db = ctx.db()\n  const query = { route: data.route, method: data.method }\n\n  if (_id) {\n    _id = objectId(_id)\n    const old = await getOne(db, { _id })\n    data = Object.assign({}, old, data)\n    query._id = { $ne: _id }\n  } else {\n    data.status = 1\n    data.createAt = Date.now()\n  }\n\n  data.weight = parseInt(data.weight || 0, 10)\n\n  const existed = await getOne(db, query)\n  if (existed) {\n    ctx.Render.fail(`路径 '${data.route}' ${data.method} 方法已经存在`)\n    return\n  }\n\n  data.updateAt = Date.now()\n\n  data = await method(db, data)\n\n  ctx.Render.success(data[0])\n})\n\nrouter.post('/api/toggle', body(), async (ctx) => {\n  const { _id, status } = ctx.request.body\n  const db = ctx.db()\n  const model = await getOne(db, { _id: objectId(_id) })\n  if (!model) ctx.Render.notFound()\n\n  model.status = status\n  await updateApi(db, model)\n  ctx.Render.success(1)\n})\n\nrouter.del('/api', body(), async (ctx) => {\n  const data = ctx.request.body\n  const count = await removeApi(ctx.db(), data._id)\n  ctx.Render.success(count)\n})\n\nexport default router\n"]}