{"version":3,"sources":["../server/index.js"],"names":["staticProxy","port","ctx","options","uri","url","mothed","headers","response","key","set","body","module","exports","appPort","apiPort","staticPort","config","render","route","appConfig","start","apiConfig","api","router","get"],"mappings":"6QAAA,uC;AACA,4B;AACA,4B;AACA,kC;;AAEA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,4FAAO,iBAAgBC,GAAhB;AACCC,qBADD,GACW;AACdC,2CAAyBH,IAAzB,GAAgCC,IAAIG,GADtB;AAEdC,wBAAQ,KAFM;AAGdC,yBAAS;AACP,iDAA+B,GADxB;AAEP,mCAAiB,UAFV,EAHK,EADX;;;AASkB,yCAAUJ,OAAV,CATlB,SASCK,QATD;AAUL,mBAAWC,GAAX,IAAkBD,SAASD,OAA3B,EAAoC;AAClCL,oBAAIQ,GAAJ,CAAQD,GAAR,EAAaD,SAASD,OAAT,CAAiBE,GAAjB,CAAb;AACD;AACDP,kBAAIS,IAAJ,GAAWH,SAASG,IAApB,CAbK,8DAAP;;AAeD;;AAEDC,OAAOC,OAAP,GAAiB,iBAAmE,KAAvDC,OAAuD,SAAvDA,OAAuD,CAA9CC,OAA8C,SAA9CA,OAA8C,CAArCC,UAAqC,SAArCA,UAAqC,CAAzBC,MAAyB,SAAzBA,MAAyB,CAAjBC,MAAiB,SAAjBA,MAAiB,CAATC,KAAS,SAATA,KAAS;AAClF,yBAAUF,MAAV;;AAEA,MAAMG,YAAY,EAAEnB,MAAMa,OAAR,EAAlB;;AAEA,MAAIC,OAAJ,EAAa;AACX,kBAAIM,KAAJ,CAAU;AACRpB,YAAMc,OADE;AAERO,iBAAWL,MAFH;AAGRC,oBAHQ;AAIRC,kBAJQ,EAAV;;AAMAC,cAAUG,GAAV;AACD;;AAED,MAAIP,UAAJ,EAAgB;AACdI,cAAUD,KAAV,GAAkB,UAACK,MAAD,EAAY;AAC5BA,aAAOC,GAAP,CAAW,mBAAX,EAAgCzB,YAAYgB,UAAZ,CAAhC;AACAQ,aAAOC,GAAP,CAAW,iCAAX,EAA8CzB,YAAYgB,UAAZ,CAA9C;AACD,KAHD;AAID;;AAED,gBAAIK,KAAJ,CAAUD,SAAV;AACD,CAvBD","file":"index.js","sourcesContent":["import coRequest from 'co-request'\nimport app from './app'\nimport api from './api'\nimport { setConfig } from './config'\n\nfunction staticProxy(port) {\n  return async function (ctx) {\n    const options = {\n      uri: `http://localhost:${port}${ctx.url}`,\n      mothed: 'GET',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Cache-Control': 'no-Cache',\n      },\n    }\n    const response = await coRequest(options)\n    for (const key in response.headers) {\n      ctx.set(key, response.headers[key])\n    }\n    ctx.body = response.body\n  }\n}\n\nmodule.exports = function ({ appPort, apiPort, staticPort, config, render, route }) {\n  setConfig(config)\n\n  const appConfig = { port: appPort }\n\n  if (apiPort) {\n    api.start({\n      port: apiPort,\n      apiConfig: config,\n      render,\n      route,\n    })\n    appConfig.api = api\n  }\n\n  if (staticPort) {\n    appConfig.route = (router) => {\n      router.get('/static/js/app.js', staticProxy(staticPort))\n      router.get('/static/js/*.hot-update.js(on)?', staticProxy(staticPort))\n    }\n  }\n\n  app.start(appConfig)\n}\n"]}