{"version":3,"sources":["../../server/models/data.js"],"names":["db","schema","data","_id","params","method","update","insert","getOne","collection","parseInt","old","insertOrUpdate","getPageList","getList","remove","getCount","col","query","find","count","page","size","sort","resolve","reject","total","skip","limit","toArray","err","list","model","result","engine","ops","$set","findOne","ok"],"mappings":"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","file":"data.js","sourcesContent":["import { callback } from '../utils/model'\nimport { nextSequence } from '../utils/objectId'\nimport config from '../config'\n\nfunction getCount(col, query) {\n  return new Promise((...args) => {\n    col.find(query).count(callback(...args))\n  })\n}\n\nexport function getPageList(col, query = {}, page, size, sort = { _id: -1 }) {\n  return new Promise(async (resolve, reject) => {\n    const total = await getCount(col, query)\n    col.find(query).sort(sort).skip((page - 1) * size).limit(size)\n      .toArray((err, list) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve({ total, page, size, list })\n        }\n      })\n  })\n}\n\nexport function getList(col, query = {}, page = 1, size = 10, sort = { _id: -1 }) {\n  return new Promise(async (resolve, reject) => {\n    col.find(query).sort(sort).skip((page - 1) * size).limit(size)\n      .toArray((err, list) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(list)\n        }\n      })\n  })\n}\n\nexport function insert(col, model) {\n  return new Promise((resolve, reject) => {\n    col.insert(model, (err, result) => {\n      if (err) reject(err)\n\n      if (config.engine === 'tingodb') resolve(result)\n      else resolve(result.ops)\n    })\n  })\n}\n\nexport function update(col, model) {\n  return new Promise((resolve, reject) => {\n    col.update({ _id: model._id }, { $set: model }, (err) => {\n      if (err) reject(err)\n      else resolve([model])\n    })\n  })\n}\n\nexport function getOne(col, query) {\n  return new Promise((...args) => {\n    col.findOne(query, callback(...args))\n  })\n}\n\nexport async function insertOrUpdate(db, schema, data) {\n  const { _id, ...params } = data\n  const method = _id ? update : insert\n\n  if (_id) {\n    const old = await getOne(db.collection(schema), { _id: parseInt(_id, 10) })\n    data = Object.assign({}, old, params)\n  } else {\n    data._id = await nextSequence(schema)\n  }\n\n  return method(db.collection(schema), data)\n}\n\nexport function remove(col, query) {\n  if (typeof query === 'string') query = { _id: query }\n  return new Promise((resolve, reject) => {\n    col.remove(query, (err, result) => {\n      if (err) reject(err)\n      if (config.engine === 'tingodb') resolve(result)\n      else resolve(result.result.ok)\n    })\n  })\n}\n"]}