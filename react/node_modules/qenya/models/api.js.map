{"version":3,"sources":["../../server/models/api.js"],"names":["getAll","insertApi","updateApi","getOne","removeApi","API_NAME","db","query","sort","_id","collection","find","toArray","model","resolve","reject","insert","err","result","engine","ops","id","update","$set","findOne","remove","ok"],"mappings":";;;;;;AAMgBA,M,GAAAA,M;;;;;;AAMAC,S,GAAAA,S;;;;;;;;;;AAUAC,S,GAAAA,S;;;;;;;;;;;AAWAC,M,GAAAA,M;;;;;;AAMAC,S,GAAAA,S,CAvChB,uCACA,6C,mDACA,mC,4IAEA,IAAMC,WAAW,KAAjB,CAEO,SAASL,MAAT,CAAgBM,EAAhB,EAAoD,KAAhCC,KAAgC,uEAAxB,EAAwB,KAApBC,IAAoB,uEAAb,EAAEC,KAAK,CAAC,CAAR,EAAa,CACzD,OAAO,sBAAY,YAAa,CAC9BH,GAAGI,UAAH,CAAcL,QAAd,EAAwBM,IAAxB,CAA6BJ,KAA7B,EAAoCC,IAApC,CAAyCA,IAAzC,EAA+CI,OAA/C,CAAuD,2CAAvD,EACD,CAFM,CAAP,CAGD,CAEM,SAASX,SAAT,CAAmBK,EAAnB,EAAuBO,KAAvB,EAA8B,CACnC,OAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB,CACtCT,GAAGI,UAAH,CAAcL,QAAd,EAAwBW,MAAxB,4BAAoCH,KAApC,IAA2CJ,KAAK,yBAAhD,KAA8D,UAACQ,GAAD,EAAMC,MAAN,EAAiB,CAC7E,IAAID,GAAJ,EAASF,OAAOE,GAAP,EACT,IAAI,iBAAOE,MAAP,KAAkB,SAAtB,EAAiCL,QAAQI,MAAR,EAAjC,KACKJ,QAAQI,OAAOE,GAAf,EACN,CAJD,EAKD,CANM,CAAP,CAOD,CAEM,SAASlB,SAAT,CAAmBI,EAAnB,EAAuBO,KAAvB,EAA8B,CACnC,IAAMQ,KAAK,wBAASR,MAAMJ,GAAf,CAAX,CAEA,OAAO,sBAAY,UAACK,OAAD,EAAUC,MAAV,EAAqB,CACtCT,GAAGI,UAAH,CAAcL,QAAd,EAAwBiB,MAAxB,CAA+B,EAAEb,KAAKY,EAAP,EAA/B,EAA4C,EAAEE,MAAMV,KAAR,EAA5C,EAA6D,UAACI,GAAD,EAAS,CACpE,IAAIA,GAAJ,EAASF,OAAOE,GAAP,EAAT,KACKH,QAAQ,CAACD,KAAD,CAAR,EACN,CAHD,EAID,CALM,CAAP,CAMD,CAEM,SAASV,MAAT,CAAgBG,EAAhB,EAAoBC,KAApB,EAA2B,CAChC,OAAO,sBAAY,YAAa,CAC9BD,GAAGI,UAAH,CAAcL,QAAd,EAAwBmB,OAAxB,CAAgCjB,KAAhC,EAAuC,2CAAvC,EACD,CAFM,CAAP,CAGD,CAEM,SAASH,SAAT,CAAmBE,EAAnB,EAAuBe,EAAvB,EAA2B;AAChC,SAAO,sBAAY,UAACP,OAAD,EAAUC,MAAV,EAAqB;AACtCT,OAAGI,UAAH,CAAcL,QAAd,EAAwBoB,MAAxB,CAA+B,EAAEhB,KAAK,wBAASY,EAAT,CAAP,EAA/B,EAAsD,UAACJ,GAAD,EAAMC,MAAN,EAAiB;AACrE,UAAID,GAAJ,EAASF,OAAOE,GAAP;AACT,UAAI,iBAAOE,MAAP,KAAkB,SAAtB,EAAiCL,QAAQI,MAAR,EAAjC;AACKJ,cAAQI,OAAOA,MAAP,CAAcQ,EAAtB;AACN,KAJD;AAKD,GANM,CAAP;AAOD","file":"api.js","sourcesContent":["import { callback } from '../utils/model'\nimport objectId from '../utils/objectId'\nimport config from '../config'\n\nconst API_NAME = 'api'\n\nexport function getAll(db, query = {}, sort = { _id: -1 }) {\n  return new Promise((...args) => {\n    db.collection(API_NAME).find(query).sort(sort).toArray(callback(...args))\n  })\n}\n\nexport function insertApi(db, model) {\n  return new Promise((resolve, reject) => {\n    db.collection(API_NAME).insert({ ...model, _id: objectId() }, (err, result) => {\n      if (err) reject(err)\n      if (config.engine === 'tingodb') resolve(result)\n      else resolve(result.ops)\n    })\n  })\n}\n\nexport function updateApi(db, model) {\n  const id = objectId(model._id)\n\n  return new Promise((resolve, reject) => {\n    db.collection(API_NAME).update({ _id: id }, { $set: model }, (err) => {\n      if (err) reject(err)\n      else resolve([model])\n    })\n  })\n}\n\nexport function getOne(db, query) {\n  return new Promise((...args) => {\n    db.collection(API_NAME).findOne(query, callback(...args))\n  })\n}\n\nexport function removeApi(db, id) {\n  return new Promise((resolve, reject) => {\n    db.collection(API_NAME).remove({ _id: objectId(id) }, (err, result) => {\n      if (err) reject(err)\n      if (config.engine === 'tingodb') resolve(result)\n      else resolve(result.result.ok)\n    })\n  })\n}\n"]}