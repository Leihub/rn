{"version":3,"sources":["../../server/models/schemas.js"],"names":["getAll","insertSchema","updateSchema","getOne","removeSchema","SCHEMA_NAME","db","collection","find","sort","_id","toArray","entity","resolve","reject","insert","err","result","engine","ops","model","sets","update","$set","query","findOne","id","remove","ok"],"mappings":";;;;;;AAMgBA,M,GAAAA,M;;;;;;AAMAC,Y,GAAAA,Y;;;;;;;;;;;AAWAC,Y,GAAAA,Y;;;;;;;;;;;AAWAC,M,GAAAA,M;;;;;;AAMAC,Y,GAAAA,Y,CAxChB,uCACA,6C,mDACA,mC,4IAEA,IAAMC,cAAc,SAApB,CAEO,SAASL,MAAT,CAAgBM,EAAhB,EAAoB,CACzB,OAAO,sBAAY,YAAa,CAC9BA,GAAGC,UAAH,CAAcF,WAAd,EAA2BG,IAA3B,CAAgC,EAAhC,EAAoCC,IAApC,CAAyC,EAAEC,KAAK,CAAC,CAAR,EAAzC,EAAsDC,OAAtD,CAA8D,2CAA9D,EACD,CAFM,CAAP,CAGD,CAEM,SAASV,YAAT,CAAsBK,EAAtB,EAA0BM,MAA1B,EAAkC,CACvC,OAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB,CACtCR,GAAGC,UAAH,CAAcF,WAAd,EAA2BU,MAA3B,4BAAuCH,MAAvC,IAA+CF,KAAK,yBAApD,KAAkE,UAACM,GAAD,EAAMC,MAAN,EAAiB,CACjF,IAAID,GAAJ,EAASF,OAAOE,GAAP,EAET,IAAI,iBAAOE,MAAP,KAAkB,SAAtB,EAAiCL,QAAQI,MAAR,EACjCJ,QAAQI,OAAOE,GAAf,EACD,CALD,EAMD,CAPM,CAAP,CAQD,CAEM,SAASjB,YAAT,CAAsBI,EAAtB,EAA0Bc,KAA1B,EAAiC,KAC9BV,GAD8B,GACbU,KADa,CAC9BV,GAD8B,CACtBW,IADsB,0CACbD,KADa,WAGtC,OAAO,sBAAY,UAACP,OAAD,EAAUC,MAAV,EAAqB,CACtCR,GAAGC,UAAH,CAAcF,WAAd,EAA2BiB,MAA3B,CAAkC,EAAEZ,KAAK,wBAASA,GAAT,CAAP,EAAlC,EAA0D,EAAEa,MAAMF,IAAR,EAA1D,EAA0E,UAACL,GAAD,EAAS,CACjF,IAAIA,GAAJ,EAASF,OAAOE,GAAP,EAAT,KACKH,QAAQ,CAACO,KAAD,CAAR,EACN,CAHD,EAID,CALM,CAAP,CAMD,CAEM,SAASjB,MAAT,CAAgBG,EAAhB,EAAoBkB,KAApB,EAA2B,CAChC,OAAO,sBAAY,YAAa,CAC9BlB,GAAGC,UAAH,CAAcF,WAAd,EAA2BoB,OAA3B,CAAmCD,KAAnC,EAA0C,2CAA1C,EACD,CAFM,CAAP,CAGD,CAEM,SAASpB,YAAT,CAAsBE,EAAtB,EAA0BoB,EAA1B,EAA8B;AACnC,SAAO,sBAAY,UAACb,OAAD,EAAUC,MAAV,EAAqB;AACtCR,OAAGC,UAAH,CAAcF,WAAd,EAA2BsB,MAA3B,CAAkC,EAAEjB,KAAK,wBAASgB,EAAT,CAAP,EAAlC,EAAyD,UAACV,GAAD,EAAMC,MAAN,EAAiB;AACxE,UAAID,GAAJ,EAASF,OAAOE,GAAP;AACT,UAAI,iBAAOE,MAAP,KAAkB,SAAtB,EAAiCL,QAAQI,MAAR,EAAjC;AACKJ,cAAQI,OAAOA,MAAP,CAAcW,EAAtB;AACN,KAJD;AAKD,GANM,CAAP;AAOD","file":"schemas.js","sourcesContent":["import { callback } from '../utils/model'\nimport objectId from '../utils/objectId'\nimport config from '../config'\n\nconst SCHEMA_NAME = 'schemas'\n\nexport function getAll(db) {\n  return new Promise((...args) => {\n    db.collection(SCHEMA_NAME).find({}).sort({ _id: -1 }).toArray(callback(...args))\n  })\n}\n\nexport function insertSchema(db, entity) {\n  return new Promise((resolve, reject) => {\n    db.collection(SCHEMA_NAME).insert({ ...entity, _id: objectId() }, (err, result) => {\n      if (err) reject(err)\n\n      if (config.engine === 'tingodb') resolve(result)\n      resolve(result.ops)\n    })\n  })\n}\n\nexport function updateSchema(db, model) {\n  const { _id, ...sets } = model\n\n  return new Promise((resolve, reject) => {\n    db.collection(SCHEMA_NAME).update({ _id: objectId(_id) }, { $set: sets }, (err) => {\n      if (err) reject(err)\n      else resolve([model])\n    })\n  })\n}\n\nexport function getOne(db, query) {\n  return new Promise((...args) => {\n    db.collection(SCHEMA_NAME).findOne(query, callback(...args))\n  })\n}\n\nexport function removeSchema(db, id) {\n  return new Promise((resolve, reject) => {\n    db.collection(SCHEMA_NAME).remove({ _id: objectId(id) }, (err, result) => {\n      if (err) reject(err)\n      if (config.engine === 'tingodb') resolve(result)\n      else resolve(result.result.ok)\n    })\n  })\n}\n"]}