'use strict';var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);var _coRequest = require('co-request');var _coRequest2 = _interopRequireDefault(_coRequest);
var _app = require('./app');var _app2 = _interopRequireDefault(_app);
var _api = require('./api');var _api2 = _interopRequireDefault(_api);
var _config = require('./config');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function staticProxy(port) {
  return function () {var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(ctx) {var options, response, key;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
              options = {
                uri: 'http://localhost:' + port + ctx.url,
                mothed: 'GET',
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Cache-Control': 'no-Cache' } };_context.next = 3;return (


                (0, _coRequest2.default)(options));case 3:response = _context.sent;
              for (key in response.headers) {
                ctx.set(key, response.headers[key]);
              }
              ctx.body = response.body;case 6:case 'end':return _context.stop();}}}, _callee, this);}));return function (_x) {return _ref.apply(this, arguments);};}();

}

module.exports = function (_ref2) {var appPort = _ref2.appPort,apiPort = _ref2.apiPort,staticPort = _ref2.staticPort,config = _ref2.config,render = _ref2.render,route = _ref2.route;
  (0, _config.setConfig)(config);

  var appConfig = { port: appPort };

  if (apiPort) {
    _api2.default.start({
      port: apiPort,
      apiConfig: config,
      render: render,
      route: route });

    appConfig.api = _api2.default;
  }

  if (staticPort) {
    appConfig.route = function (router) {
      router.get('/static/js/app.js', staticProxy(staticPort));
      router.get('/static/js/*.hot-update.js(on)?', staticProxy(staticPort));
    };
  }

  _app2.default.start(appConfig);
};
//# sourceMappingURL=index.js.map