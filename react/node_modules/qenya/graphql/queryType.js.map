{"version":3,"sources":["../../server/graphql/queryType.js"],"names":["getQueryType","clearQueryType","typeDict","getSingleJsonType","db","field","ref","type","args","fmt","description","resolve","d","collection","code","_id","name","then","value","getMultJsonType","join","ids","sep","map","parseInt","id","$in","v","schema","schemas","fields","forEach","f","sourceType","find","s","sourceRef","fn","mult","renderType","typeFns","gt","desc","getSingleGraphqlType","getMultGraphqlType"],"mappings":"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","file":"queryType.js","sourcesContent":["import {\n  GraphQLID,\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLString,\n} from 'graphql'\nimport { getOne, getList } from '../models/data'\nimport refType from './refType'\nimport { substitute } from '../utils/strings'\nimport { convertType, toArray } from './type'\n\nlet typeDict = {}\n\nfunction getSingleJsonType(db, field, ref) {\n  return {\n    type: refType(field),\n    args: {\n      fmt: {\n        type: GraphQLString,\n        description: 'Format string, like \"{name}\"',\n      },\n    },\n    resolve: (d, { fmt }) => getOne(db.collection(ref.code), { _id: d[field.name] })\n        .then((value) => {\n          if (!fmt) return value\n          return substitute(fmt, value)\n        }),\n  }\n}\n\nfunction getMultJsonType(db, field, ref) {\n  return {\n    type: refType(field),\n    args: {\n      fmt: { type: GraphQLString },\n      join: { type: GraphQLString },\n    },\n    resolve: (d, { fmt, join }) => {\n      const ids = toArray(d[field.name], field.sep).map(id => parseInt(id, 10))\n      return getList(db.collection(ref.code), { _id: { $in: ids } })\n        .then((value) => {\n          if (!fmt) return value\n          value = value.map(v => substitute(fmt, v))\n          if (join) value = value.join(join)\n          return value\n        })\n    },\n  }\n}\n\nexport default function getQueryType(schema, schemas, db) {\n  const name = schema.code\n  if (typeDict[name]) return typeDict[name]\n\n  const fields = {\n    _id: {\n      type: GraphQLID,\n    },\n  }\n\n  schema.fields.forEach((f) => {\n    if (f.sourceType === 'ref' && schemas) {\n      const ref = schemas.find(s => s.code === f.sourceRef)\n\n      const fn = `${f.mult ? 'mult' : 'single'}-${f.renderType}`\n      fields[f.name] = typeFns[fn](db, f, ref)\n    } else {\n      fields[f.name] = { type: convertType(f.type) }\n    }\n  })\n\n  const gt = new GraphQLObjectType({\n    name,\n    fields,\n    description: schema.desc,\n  })\n\n  typeDict[name] = gt\n  return gt\n}\n\nfunction getSingleGraphqlType(db, field, ref) {\n  return {\n    type: getQueryType(ref),\n    resolve: (d, { fmt }) => getOne(db.collection(ref.code), { _id: parseInt(d[field.name], 10) }),\n  }\n}\n\nfunction getMultGraphqlType(db, field, ref) {\n  return {\n    type: new GraphQLList(getQueryType(ref)),\n    resolve: (d, { fmt, join }) => {\n      const ids = toArray(d[field.name], field.sep)\n      return getList(db.collection(ref.code), { _id: { $in: ids } })\n    },\n  }\n}\n\nconst typeFns = {\n  'mult-json': getMultJsonType,\n  'single-json': getSingleJsonType,\n  'mult-graphql': getMultGraphqlType,\n  'single-graphql': getSingleGraphqlType,\n}\n\nexport function clearQueryType() {\n  typeDict = {}\n}\n"]}