{"version":3,"sources":["../../server/graphql/refType.js"],"names":["refType","types","field","name","serialize","value","parseValue","parseLiteral"],"mappings":";;;;AAIwBA,O,CAJxB,kCAEA,IAAMC,QAAQ,EAAd,CAEe,SAASD,OAAT,CAAiBE,KAAjB,EAAwB;AACrC,MAAMC,OAAUD,MAAMC,IAAhB,YAAN;AACA,MAAIF,MAAME,IAAN,CAAJ,EAAiB,OAAOF,MAAME,IAAN,CAAP;;AAEjBF,QAAME,IAAN,IAAc,+BAAsB;AAClCA,cADkC;AAElCC,aAFkC,qBAExBC,KAFwB,EAEjB;AACf,aAAOA,KAAP;AACD,KAJiC;AAKlCC,cALkC,sBAKvBD,KALuB,EAKhB;AAChB,aAAOA,KAAP;AACD,KAPiC;AAQlCE,gBARkC,wBAQrBF,KARqB,EAQd;AAClB,aAAOA,KAAP;AACD,KAViC,EAAtB,CAAd;;;AAaA,SAAOJ,MAAME,IAAN,CAAP;AACD","file":"refType.js","sourcesContent":["import { GraphQLScalarType } from 'graphql'\n\nconst types = {}\n\nexport default function refType(field) {\n  const name = `${field.name}RefType`\n  if (types[name]) return types[name]\n\n  types[name] = new GraphQLScalarType({\n    name,\n    serialize(value) {\n      return value\n    },\n    parseValue(value) {\n      return value\n    },\n    parseLiteral(value) {\n      return value\n    },\n  })\n\n  return types[name]\n}\n"]}