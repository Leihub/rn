'use strict';exports.__esModule = true;var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);exports.default =
































































































































getSchema;exports.






clearType = clearType;var _graphql = require('graphql');var _data = require('../models/data');var _queryType = require('./queryType');var _queryType2 = _interopRequireDefault(_queryType);var _type = require('./type');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function getOneQuery(db, schema, graphType) {return { type: graphType, args: { _id: { type: _graphql.GraphQLID } }, resolve: function resolve(root, _ref) {var _id = _ref._id;return (0, _data.getOne)(db.collection(schema.code), { _id: parseInt(_id, 10) });} };}function getListQuery(db, schema, graphType) {return { type: new _graphql.GraphQLList(graphType), args: { page: { type: _graphql.GraphQLInt }, size: { type: _graphql.GraphQLInt }, query: { type: _graphql.GraphQLString, desciprtion: 'mongodb query' }, sort: { type: _graphql.GraphQLString, desciprtion: 'mongodb sort' } }, resolve: function resolve(root, _ref2) {var _ref2$page = _ref2.page,page = _ref2$page === undefined ? 1 : _ref2$page,_ref2$size = _ref2.size,size = _ref2$size === undefined ? 20 : _ref2$size,_ref2$query = _ref2.query,query = _ref2$query === undefined ? '{}' : _ref2$query,_ref2$sort = _ref2.sort,sort = _ref2$sort === undefined ? '{ "_id": -1 }' : _ref2$sort;query = JSON.parse(query);sort = JSON.parse(sort);return (0, _data.getList)(db.collection(schema.code), query, page, size, sort);} };}function getListWithPageQuery(db, schema, graphType) {return { type: new _graphql.GraphQLObjectType({ name: schema.code + 'ListWithPage', fields: { total: { type: _graphql.GraphQLInt }, page: { type: _graphql.GraphQLInt }, size: { type: _graphql.GraphQLInt }, list: { type: new _graphql.GraphQLList(graphType) } } }), args: { page: { type: _graphql.GraphQLInt }, size: { type: _graphql.GraphQLInt }, query: { type: _graphql.GraphQLString, desciprtion: 'mongodb query' }, sort: { type: _graphql.GraphQLString, desciprtion: 'mongodb sort' } }, resolve: function resolve(root, _ref3) {var _ref3$page = _ref3.page,page = _ref3$page === undefined ? 1 : _ref3$page,_ref3$size = _ref3.size,size = _ref3$size === undefined ? 20 : _ref3$size,_ref3$query = _ref3.query,query = _ref3$query === undefined ? '{}' : _ref3$query,_ref3$sort = _ref3.sort,sort = _ref3$sort === undefined ? '{ "_id": -1 }' : _ref3$sort;query = JSON.parse(query);sort = JSON.parse(sort);return (0, _data.getPageList)(db.collection(schema.code), query, page, size, sort);} };}function getQuery(db, schemas) {var fields = {};schemas.forEach(function (schema) {var graphType = (0, _queryType2.default)(schema, schemas, db);fields[schema.code + 'List'] = getListQuery(db, schema, graphType);fields[schema.code + 'ListWithPage'] = getListWithPageQuery(db, schema, graphType);fields[schema.code] = getOneQuery(db, schema, graphType);});return new _graphql.GraphQLObjectType({ name: 'Query', fields: fields });}function getSaveQuery(db, schema, queryType) {var _this = this;var args = { _id: { type: _graphql.GraphQLID } };schema.fields.forEach(function (f) {args[f.name] = { type: f.type === 'enum' ? (0, _type.convertRefType)(f) : (0, _type.convertType)(f.type) };});return { type: queryType, args: args, resolve: function () {var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(root, data) {var res;return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return (0, _data.insertOrUpdate)(db, schema.code, data);case 2:res = _context.sent;return _context.abrupt('return', res[0]);case 4:case 'end':return _context.stop();}}}, _callee, _this);}));return function resolve(_x, _x2) {return _ref4.apply(this, arguments);};}() };}function getDeleteQuery(db, schema) {return { type: _graphql.GraphQLInt, args: { _id: { type: _graphql.GraphQLID } }, resolve: function resolve(root, _ref5) {var _id = _ref5._id;return (0, _data.remove)(db.collection(schema.code), _id);} };}function getMutation(db, schemas) {var fields = {};schemas.forEach(function (schema) {var queryType = (0, _queryType2.default)(schema, schemas, db); // const inputType = getInputType(schema, schemas, db)
    var name = schema.code.replace(/\b\w/g, function (l) {return l.toUpperCase();});fields['save' + name] = getSaveQuery(db, schema, queryType);fields['delete' + name] = getDeleteQuery(db, schema);});return new _graphql.GraphQLObjectType({ name: 'Mutation', fields: fields });}function getSchema(db, schemas) {return new _graphql.GraphQLSchema({ query: getQuery(db, schemas), mutation: getMutation(db, schemas) });}function clearType() {(0, _queryType.clearQueryType)();
}
//# sourceMappingURL=index.js.map