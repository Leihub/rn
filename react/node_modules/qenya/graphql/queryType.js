'use strict';exports.__esModule = true;exports.default =

















































getQueryType;exports.






















































clearQueryType = clearQueryType;var _graphql = require('graphql');var _data = require('../models/data');var _refType = require('./refType');var _refType2 = _interopRequireDefault(_refType);var _strings = require('../utils/strings');var _type = require('./type');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var typeDict = {};function getSingleJsonType(db, field, ref) {return { type: (0, _refType2.default)(field), args: { fmt: { type: _graphql.GraphQLString, description: 'Format string, like "{name}"' } }, resolve: function resolve(d, _ref) {var fmt = _ref.fmt;return (0, _data.getOne)(db.collection(ref.code), { _id: d[field.name] }).then(function (value) {if (!fmt) return value;return (0, _strings.substitute)(fmt, value);});} };}function getMultJsonType(db, field, ref) {return { type: (0, _refType2.default)(field), args: { fmt: { type: _graphql.GraphQLString }, join: { type: _graphql.GraphQLString } }, resolve: function resolve(d, _ref2) {var fmt = _ref2.fmt,join = _ref2.join;var ids = (0, _type.toArray)(d[field.name], field.sep).map(function (id) {return parseInt(id, 10);});return (0, _data.getList)(db.collection(ref.code), { _id: { $in: ids } }).then(function (value) {if (!fmt) return value;value = value.map(function (v) {return (0, _strings.substitute)(fmt, v);});if (join) value = value.join(join);return value;});} };}function getQueryType(schema, schemas, db) {var name = schema.code;if (typeDict[name]) return typeDict[name];var fields = { _id: { type: _graphql.GraphQLID } };schema.fields.forEach(function (f) {if (f.sourceType === 'ref' && schemas) {var ref = schemas.find(function (s) {return s.code === f.sourceRef;});var fn = (f.mult ? 'mult' : 'single') + '-' + f.renderType;fields[f.name] = typeFns[fn](db, f, ref);} else {fields[f.name] = { type: (0, _type.convertType)(f.type) };}});var gt = new _graphql.GraphQLObjectType({ name: name, fields: fields, description: schema.desc });typeDict[name] = gt;return gt;}function getSingleGraphqlType(db, field, ref) {return { type: getQueryType(ref), resolve: function resolve(d, _ref3) {var fmt = _ref3.fmt;return (0, _data.getOne)(db.collection(ref.code), { _id: parseInt(d[field.name], 10) });} };}function getMultGraphqlType(db, field, ref) {return { type: new _graphql.GraphQLList(getQueryType(ref)), resolve: function resolve(d, _ref4) {var fmt = _ref4.fmt,join = _ref4.join;var ids = (0, _type.toArray)(d[field.name], field.sep);return (0, _data.getList)(db.collection(ref.code), { _id: { $in: ids } });} };}var typeFns = { 'mult-json': getMultJsonType, 'single-json': getSingleJsonType, 'mult-graphql': getMultGraphqlType, 'single-graphql': getSingleGraphqlType };function clearQueryType() {
  typeDict = {};
}
//# sourceMappingURL=queryType.js.map