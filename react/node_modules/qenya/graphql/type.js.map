{"version":3,"sources":["../../server/graphql/type.js"],"names":["convertType","convertRefType","toArray","type","field","sourceType","sep","mult","value","split"],"mappings":";;;;;;;;;;AAUgBA,W,GAAAA,W;;;;;;;;;;;;;;;AAeAC,c,GAAAA,c;;;;;;;;;;AAUAC,O,GAAAA,O,CAnChB,kCAQA,sC,gJAEO,SAASF,WAAT,CAAqBG,IAArB,EAA2B,CAChC,QAAQA,IAAR,GACE,KAAK,MAAL,CACE,+BACF,KAAK,SAAL,CACE,2BACF,KAAK,QAAL,CACE,6BACF,KAAK,MAAL,CACE,0BACF,QACE,8BAVJ,CAYD,CAEM,SAASF,cAAT,CAAwBG,KAAxB,EAA+B,CACpC,IAAIA,MAAMC,UAAN,KAAqB,KAArB,IAA8B,CAACD,MAAME,GAAzC,EAA8C,CAC5C,IAAIF,MAAMG,IAAV,EAAgB,OAAO,4CAAP,CAEhB,0BACD,CAED,8BACD,CAEM,SAASL,OAAT,CAAiBM,KAAjB,EAAwBF,GAAxB,EAA6B;AAClC,MAAI,OAAOE,KAAP,KAAiB,QAAjB,IAA6BF,GAAjC,EAAsC;AACpCE,YAAQA,MAAMC,KAAN,CAAYH,GAAZ,CAAR;AACD;;AAED,SAAOE,KAAP;AACD","file":"type.js","sourcesContent":["import {\n  GraphQLID,\n  GraphQLList,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLFloat,\n} from 'graphql'\nimport JsonType from './jsonType'\n\nexport function convertType(type) {\n  switch (type) {\n    case 'bool':\n      return GraphQLBoolean\n    case 'integer':\n      return GraphQLInt\n    case 'number':\n      return GraphQLFloat\n    case 'json':\n      return JsonType\n    default:\n      return GraphQLString\n  }\n}\n\nexport function convertRefType(field) {\n  if (field.sourceType === 'ref' && !field.sep) {\n    if (field.mult) return new GraphQLList(GraphQLID)\n\n    return GraphQLID\n  }\n\n  return GraphQLString\n}\n\nexport function toArray(value, sep) {\n  if (typeof value === 'string' && sep) {\n    value = value.split(sep)\n  }\n\n  return value\n}\n"]}