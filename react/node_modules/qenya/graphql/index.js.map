{"version":3,"sources":["../../server/graphql/index.js"],"names":["getSchema","clearType","getOneQuery","db","schema","graphType","type","args","_id","resolve","root","collection","code","parseInt","getListQuery","page","size","query","desciprtion","sort","JSON","parse","getListWithPageQuery","name","fields","total","list","getQuery","schemas","forEach","getSaveQuery","queryType","f","data","res","getDeleteQuery","getMutation","replace","l","toUpperCase","mutation"],"mappings":"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","file":"index.js","sourcesContent":["import {\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLList,\n  GraphQLInt,\n  GraphQLID,\n} from 'graphql'\nimport { getOne, getPageList, getList, insertOrUpdate, remove } from '../models/data'\nimport getQueryType, { clearQueryType } from './queryType'\nimport { convertType, convertRefType } from './type'\n\nfunction getOneQuery(db, schema, graphType) {\n  return {\n    type: graphType,\n    args: {\n      _id: {\n        type: GraphQLID,\n      },\n    },\n    resolve: (root, { _id }) => getOne(db.collection(schema.code), { _id: parseInt(_id, 10) }),\n  }\n}\n\nfunction getListQuery(db, schema, graphType) {\n  return {\n    type: new GraphQLList(graphType),\n    args: {\n      page: { type: GraphQLInt },\n      size: { type: GraphQLInt },\n      query: { type: GraphQLString, desciprtion: 'mongodb query' },\n      sort: { type: GraphQLString, desciprtion: 'mongodb sort' },\n    },\n    resolve: (root, { page = 1, size = 20, query = '{}', sort = '{ \"_id\": -1 }' }) => {\n      query = JSON.parse(query)\n      sort = JSON.parse(sort)\n      return getList(db.collection(schema.code), query, page, size, sort)\n    },\n  }\n}\n\nfunction getListWithPageQuery(db, schema, graphType) {\n  return {\n    type: new GraphQLObjectType({\n      name: `${schema.code}ListWithPage`,\n      fields: {\n        total: { type: GraphQLInt },\n        page: { type: GraphQLInt },\n        size: { type: GraphQLInt },\n        list: { type: new GraphQLList(graphType) },\n      },\n    }),\n    args: {\n      page: { type: GraphQLInt },\n      size: { type: GraphQLInt },\n      query: { type: GraphQLString, desciprtion: 'mongodb query' },\n      sort: { type: GraphQLString, desciprtion: 'mongodb sort' },\n    },\n    resolve: (root, { page = 1, size = 20, query = '{}', sort = '{ \"_id\": -1 }' }) => {\n      query = JSON.parse(query)\n      sort = JSON.parse(sort)\n      return getPageList(db.collection(schema.code), query, page, size, sort)\n    },\n  }\n}\n\n\nfunction getQuery(db, schemas) {\n  const fields = {}\n  schemas.forEach((schema) => {\n    const graphType = getQueryType(schema, schemas, db)\n    fields[`${schema.code}List`] = getListQuery(db, schema, graphType)\n    fields[`${schema.code}ListWithPage`] = getListWithPageQuery(db, schema, graphType)\n    fields[schema.code] = getOneQuery(db, schema, graphType)\n  })\n\n  return new GraphQLObjectType({\n    name: 'Query',\n    fields,\n  })\n}\n\nfunction getSaveQuery(db, schema, queryType) {\n  const args = {\n    _id: { type: GraphQLID },\n  }\n\n  schema.fields.forEach((f) => {\n    args[f.name] = { type: (f.type === 'enum' ? convertRefType(f) : convertType(f.type)) }\n  })\n\n  return {\n    type: queryType,\n    args,\n    resolve: async (root, data) => {\n      const res = await insertOrUpdate(db, schema.code, data)\n      return res[0]\n    },\n  }\n}\n\nfunction getDeleteQuery(db, schema) {\n  return {\n    type: GraphQLInt,\n    args: {\n      _id: {\n        type: GraphQLID,\n      },\n    },\n    resolve: (root, { _id }) => remove(db.collection(schema.code), _id),\n  }\n}\n\nfunction getMutation(db, schemas) {\n  const fields = {}\n  schemas.forEach((schema) => {\n    const queryType = getQueryType(schema, schemas, db)\n    // const inputType = getInputType(schema, schemas, db)\n    const name = schema.code.replace(/\\b\\w/g, l => l.toUpperCase())\n    fields[`save${name}`] = getSaveQuery(db, schema, queryType)\n    fields[`delete${name}`] = getDeleteQuery(db, schema)\n  })\n\n  return new GraphQLObjectType({\n    name: 'Mutation',\n    fields,\n  })\n}\n\nexport default function getSchema(db, schemas) {\n  return new GraphQLSchema({\n    query: getQuery(db, schemas),\n    mutation: getMutation(db, schemas),\n  })\n}\n\nexport function clearType() {\n  clearQueryType()\n}\n"]}