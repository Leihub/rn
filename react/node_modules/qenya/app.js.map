{"version":3,"sources":["../server/app.js"],"names":["options","config","app","use","engine","mdb","resolve","__dirname","map","html","get","ctx","api","reset","Render","success","route","path","root","routes","listen","port","console","log","start"],"mappings":";;;;;;;;;;;AAWA,oBAAqBA,OAArB;AACE,mCAAUA,QAAQC,MAAlB;;AAEMC,eAHR,GAGc,mBAHd;;AAKEA,gBAAIC,GAAJ;;AAEAD,gBAAIC,GAAJ;;AAEA;AATF,kBAUM,iBAAOC,MAAP,KAAkB,SAVxB;AAWIF,gBAAIC,GAAJ,CAAQ,wBAAR,EAXJ;;AAasB,sCAbtB,UAaUE,GAbV;AAcIH,gBAAIC,GAAJ,CAAQE,GAAR,EAdJ;;;AAiBEH,gBAAIC,GAAJ,CAAQ,wBAAM,eAAKG,OAAL,CAAaC,SAAb,EAAwB,QAAxB,CAAN,EAAyC;AAC/CC,mBAAK,EAAEC,MAAM,MAAR,EAD0C,EAAzC,CAAR;;;AAIA,6BAAOC,GAAP,CAAW,WAAX,sFAAwB,iBAAOC,GAAP;AAClBX,gCAAQY,GADU,qDACCZ,QAAQY,GAAR,CAAYC,KAAZ,EADD;AAEtBF,4BAAIG,MAAJ,CAAWC,OAAX,CAAmB,EAAnB,EAFsB,+DAAxB;;;AAKA,gBAAIf,QAAQgB,KAAZ,EAAmBhB,QAAQgB,KAAR;;AAEnB,6BAAON,GAAP,CAAW,WAAX,sFAAwB,kBAAOC,GAAP;AAChB,iDAAKA,GAAL,EAAUA,IAAIM,IAAd,EAAoB,EAAEC,MAAMX,SAAR,EAApB,CADgB,mEAAxB;;;AAIAL,gBAAIC,GAAJ,CAAQ,iBAAOgB,MAAP,EAAR;;AAEAjB,gBAAIkB,MAAJ,CAAWpB,QAAQqB,IAAnB,EAAyB,YAAM;AAC7BC,sBAAQC,GAAR,+CAAwDvB,QAAQqB,IAAhE;AACD,aAFD,EAlCF,iE,mBAAeG,K,+CAXf,4B,2CACA,0B,yCACA,qC,mDACA,mC,iDACA,kC,+CACA,gD,iDACA,gD,iDACA,8C,+CACA,8C,+CACA,kC;;;AAyCe;AACbA,cADa,E","file":"app.js","sourcesContent":["import path from 'path'\nimport Koa from 'koa'\nimport views from 'koa-views'\nimport send from 'koa-send'\nimport config, { setConfig } from './config'\nimport tingodb from './middlewares/tingodb'\nimport mongodb from './middlewares/mongodb'\nimport logger from './middlewares/logger'\nimport render from './middlewares/render'\nimport router from './router'\n\nasync function start(options) {\n  setConfig(options.config)\n\n  const app = new Koa()\n\n  app.use(logger)\n\n  app.use(render)\n\n  // db engine\n  if (config.engine === 'tingodb') {\n    app.use(tingodb())\n  } else {\n    const mdb = await mongodb()\n    app.use(mdb)\n  }\n\n  app.use(views(path.resolve(__dirname, 'static'), {\n    map: { html: 'swig' },\n  }))\n\n  router.get('/resetapi', async (ctx) => {\n    if (options.api) await options.api.reset()\n    ctx.Render.success('')\n  })\n\n  if (options.route) options.route(router)\n\n  router.get('/static/*', async (ctx) => {\n    await send(ctx, ctx.path, { root: __dirname })\n  })\n\n  app.use(router.routes())\n\n  app.listen(options.port, () => {\n    console.log(`qenya server running on http://localhost:${options.port}`)\n  })\n}\n\nexport default {\n  start,\n}\n"]}